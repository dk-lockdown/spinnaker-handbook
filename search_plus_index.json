{"./":{"url":"./","title":"简介","keywords":"","body":"介绍 使用Spinnaker进行持续部署 https://www.spinnaker.io/ebook/cover.png 免费下载 PDF | Epub | Mobi 电子书说明 许多公司正在每个六个月左右从“大爆炸”软件版本转向持续交付（CD）模式，以便IT部门能够频繁发布更新，即使这意味着每天多次。这本实用的电子书以Netflix及其开放源代码Spinnaker CD平台为例，演示了新的主机工具如何帮助您快速，安全且自动地将软件更改部署到生产环境。 来自Netflix和Google的专家团队向您展示了如何使用Spinnaker跨越多个云账户，地区甚至跨多个云平台将部署自动化为持续的部署流水线。您将了解Spinnaker如何帮助您的公司设计和自动化交付流程，该流程不仅符合您的发布步调，还符合应用程序的业务关键性。 了解实现持续交付的组织和技术实践 了解在成功将软件部署到云之前需要解决的基本考虑因素 管理云资源以实现跨帐户，区域和云提供商的一致性 使用Spinnaker的管道来构建可定制部件的部署 了解到Kubernetes的CD管道与管道到基于VM的云的区别 检查Spinnaker如何确保跨集群部署和管道执行的安全性 了解如何将自动化测试技术（如混沌工程或自动化金丝雀分析）集成到交付流程中 Copyright © qikqiak.com 2018 all right reserved，powered by GitbookUpdated: 2018-06-11 16:07:56 "},"preface/":{"url":"preface/","title":"前言","keywords":"","body":"前言 很多公司，甚至大部分公司都在组织软件开发“大爆炸”发布。 应用程序具有一系列新功能和改进开发了数周，数月甚至数年，费力测试，然后全部发布立刻。如果在发布后发现错误，用户可能需要一段时间才能收到错误消息修复。 这种传统的软件发布模式植根于物理的生产产品 - 汽车，电器，甚至是物理媒体上销售的软件。 但软件部署到服务器，或由用户通过互联网安装，并具有以下能力轻松升级不会共享物理产品的限制。 没有 需要产品召回或售后升级以提高性能时可以根据需要频繁地在互联网上部署新版本。 持续交付是交付目标软件的另一种模式减少库存功能并修复已开发但尚未交付的数量 - 通过大幅缩短发布之间的时间，为用户提供服务。它可以被看作是敏捷软件开发的产物，其目标是开发软件迭代地并且寻求来自用户的持续验证和反馈以便避免冗余风险增加，缺陷分析或不适合的功能用于与大型，不常使用的软件版本相关的目的。 使用持续交付的团队推动功能和修复，直到他们准备就绪，而无需将其分配到正式版本中。 连续的情况并不罕见交付团队每天多次推送更新。 自动连续部署比持续交付更进一步一旦通过自动化测试，金丝雀分析，负载测试和其他用于证明没有引入回归的检查，就会推动每次更改。 持续交付和持续部署依赖于定义一个自动化和可重复的过程来释放更新。 每周节奏高达数十次，每个版本都很快就会变得站不住脚vii以临时方式手动部署。团队需要哪些工具可以可靠地部署版本，如果有诚实，有时会出现问题，并且不会妨碍监控和管理。 Spinnaker Netflix开发了Spinnaker来解决这些问题。 它使团队能够 自动化跨多个云帐户和地区的部署，甚至 跨越多个云平台，转变为随时随地运行的一致的“管道” 新版本发布。 这使团队可以设计和自动化交付 适合其发布节奏的流程以及其应用程序的业务关键性， 灰。 2009年，Netflix将其第一个微服务部署到了云端。到2014年， 亚马逊云计算除了计费以外，还有冰点。 在2016年1月份 最终的数据中心依赖关闭被关闭，Netflix的服务100％运行 在AWS上。 Spinnaker从这次迁移到云和云计算中吸取的教训中产生出来 Netflix开发的经常为软件提供软件的实践，空洞，可靠。 谁应该阅读该书籍 这份报告是对一个团队想要面对的问题的介绍对部署在云中的软件采用持续交付流程。 这是不是一个详尽的Spinnaker用户指南。 三角帆作为如何编码发布过程的例子。 如果您想知道如何开始持续交付或持续交付在云中部署，如果你想看看Netflix和其他公司的原因如果你愿意，持续交付有助于管理软件开发中的风险想要了解如何将部署编码到自动化管道中有所帮助你更快地创新，继续阅读...... 致谢 我们要感谢在Spinnaker社区帮助过的同事,我们通过在整个写作过程中审阅本报告：Matt Duftler, Ethan Rogers, Andrew Phillips, Gard Rimestad, Erin Kidwell, Chris Berry, Daniel Reynaud, David Dorbin, and Michael Graff Copyright © qikqiak.com 2018 all right reserved，powered by GitbookUpdated: 2018-06-11 16:20:58 "},"why_continuous_delivery/":{"url":"why_continuous_delivery/","title":"为什么需要持续交付？","keywords":"","body":"为何需要持续交互？ 持续交付是可以部署软件更改的实践以快速，安全和自动的方式进行生产。 在持续交付的世界里，发布新功能并不是一个世界性的盛会，公司内的每个人在代码冻结后停止工作数周，并在命运期间紧张地围绕仪表板等待部署时间。相反，向用户发布新的软件应该是常规的，无聊的，并且非常容易，以至于一天可以发生多次。 在本章中，我们将描述组织和技术实践实现持续交付。我们希望它说服你的好处更短的发布周期，并帮助您了解文化和实践通知Netflix和其他类似组织的交付文化。 长部署周期的问题 依赖性漂移。 由于未部署的代码时间越来越长，库和服务取决于继续前进。 当它来的时候部署这些更改，因为上游的库版本具有意想不到的问题改变，或者它所谈论的服务不再具有该兼容的API。 人们也继续前进。一旦某个功能完成开发，开发人员将会自然而然地倾向于下一个项目或一组功能。 信息是在创作者的头脑中不再是新鲜事物，所以如果出现问题，他们需要回去调查一个月，六个月或一年前的想法。此外，通过大量发布，隔离和分类问题来源变得更加困难。 那么我们如何使这更容易？ 我们更频繁地发布 持续交付的好处 持续交付消除了软件发布过程中的典礼。这种方法有几个好处： 革新 持续交付确保了新功能的更快上市时间，修改变更，实验和错误修复。积极的发布节奏确保迅速修复破碎的事情并确保用户满意的新方式在几天内到达，而不是几个月。 更快的反馈循环 经常部署的较小更改可以更轻松地解决问题。通过采用混沌工程或自动化测试技术自动化的金丝雀分析到交付过程中，问题可以被检测到，更快，更有效地修复。 提高可靠性和可用性 为了快速发布，持续交付鼓励工具取代手动具有自动化工作流程的容易出错的流程。连续输送管可以进一步制作线条以在特定时间逐渐展开更改和不同的云目标。安全的部署实践可以嵌入到 释放过程并减少恶劣部署的爆炸半径。 开发人员的效率和效率 更频繁的发布节奏有助于减少不兼容的问题上游依赖关系。加快提交和部署之间的时间允许开发人员在问题发生变化时对问题进行诊断和反应他们的头脑。开发人员负责维护这些服务他们部署的时候，有更强烈的归属感和更少的责备感问题出现了。持续交付导致高绩效，更快乐的开发人员。 有效实践 随着系统的发展和变化的推进，错误和不兼容可能会发生介绍会影响系统的可用性。启用更多的唯一方法频繁的变化是投资支持具有更好工具，实践，和文化。 这里有一些有用的技术和原理，我们发现它们可以加速这个过程 采用连续交付实践： 鼓励自给自足 不要将部署过程委派给专门的团队，而应该允许编写代码负责部署和支持的工程师自己发布。通过提供自助式工具和授权工程师，当他们感觉准备就绪时，他们会推动代码，工程师可以快速创新，检测和响应。 自动化所有的东西 在构建，测试，发布和推广的每一个环节都充分支持自动化 循环降低了保管部署过程的必要性。 使其可见 改善无法观察的事物是很困难的。我们发现整合不同账户，地区和地区的所有云资源将云提供商整合到一个视图中可以更轻松地跟踪和调试任何视图道还可以让我们的用户轻松完成跟踪如何在不同的步骤中推广神器。 让它容易做到 它不应该需要专家级的知识才能制定云部署。我们发现重点关注用户体验，以便任何人都可以修改并改进他们自己的流程对采用合约有重大影响细致的运送。 柏油路 说服团队接受持续交付时要容易得多你可以为他们提供一个可以插入的现成模板。我们定义了封装的“铺设道路”（有时称为“黄金道路”）希望部署到云端的团队的最佳实践（图1-1）。一样更多的团队开始使用这些工具，并且我们作出了一些改进的反馈循环变得可供其他团队使用。 最好实践会变得具有传染性。 图1-1. Netflix软件发布的道路。第一行显示步骤，从代码签入到流量，底部的行显示使用的工具在Netflix每一步。 总结 在迁移到持续交付平台后，我们发现因部署不当而导致的问题和中断数量明显减少。现在我们全力投入Spinnaker，更容易帮助推进这些实践，从而导致部署相关问题的普遍减少。 Copyright © qikqiak.com 2018 all right reserved，powered by GitbookUpdated: 2018-06-11 17:03:58 "},"cloud_deployment_considerations/":{"url":"cloud_deployment_considerations/","title":"云部署注意事项","keywords":"","body":"云部署注意事项 无论是开始一个新建项目，还是计划将复杂的分布式系统迁移到云中，围绕软件部署和基础架构架构的选择都会对应用程序的稳健性，安全性和扩展能力产生重大影响。这里的规模既指由应用程序处理的流量，也指组织中工程师，团队和服务的数量不断增加。 前一章介绍了为什么连续交付对组织有益。它还涵盖了在考虑组织中的持续交付时要记住的一些实践。在本章中，我们将讨论贵组织需要解决的基本考虑因素，以便将软件成功部署到云中。在您选择持续交付策略之前，这些领域中的每一个都需要在您的组织中有解决方案。对于每一项考虑，我们都会展示这些陷阱，并将社区和Netflix所做的工作作为潜在的解决方案进行展示。在建立持续交付解决方案之前，您将了解需要考虑的事项。 证书管理 首先要考虑的是如何在云中管理凭证。 作为一个明智的模因曾经说过，云就是别人的电脑。 在存储敏感数据时，您应该小心，但在使用租用的共享硬件片时尤其如此。 云提供商身份和访问管理（IAM）服务有助于实现角色的计算资源分配，使他们能够访问安全资源，而无需静态部署凭证，这些凭证很容易被盗取且难以跟踪。 尽管IAM只有这么远。 很可能，您的至少部分服务需要与内部或第三方应用程序供应商运营的已验证服务通话。 数据库密码，GitHub令牌，客户端证书和私钥都应该在静态和网络中加密，敏感的客户数据也应该如此。 证书应定期轮换并具有经过测试的撤销方法。 Google的云密钥管理服务满足了Google云端平台（GCP）客户的这些需求。 亚马逊的密钥管理服务通过将密钥存储在硬件安全模块（HSM）中提供了额外的物理安全层，但其范围仅限于密钥存储和管理的基础。 Kubernetes的秘密系统专注于储存和分配到容器。HashiCorp的Vault是一款备受好评的开源解决方案，可用于秘密和证书管理，功能齐全，可在任何环境中运行。 无论选择还是构建解决方案，都要考虑它将如何与您的软件交付流程集成。您应该使用微型服务部署所需的最小权限集，并且只需要他们需要的秘密。 区域隔离 第二件要考虑的是地区隔离。云提供商倾向于将其基础设施组织到可寻址的区域和区域。区域是物理数据中心;靠近的几个区域组成一个区域。由于它们的接近性，跨同一区域内的区域的网络传输应该具有非常低的延迟。区域可以大陆分开，它们之间的延迟比相邻区域之间的数量级要大。 最健壮的应用程序可以在多个区域运行，而不会跨地区共享相关性。 简单的故障情景 采取在区域1，区域2和区域3运行的应用程序。如果一个物理事故或软件错误使区域1脱机，唯一的用户影响应该是增加那些距离区域1最近的用户的网络延迟，因为他们的请求现在路由到更远的区域。 这是理想的情况，但很少像将服务和基础架构复制到多个区域一样简单，而且可能很昂贵。在我们的简单故障情况下，其中唯一的用户影响是由网络延迟引起的，其他地区有足够的容量准备好处理来自区域1的突然涌入的用户。冷藏库没有引入额外的延迟或导致[...] 对于许多组织来说，这种理想并不现实。在短时间内接受一些可用性和延迟时间降低，而“救世主”地区自动缩放服务以响应丢失的区域可以导致显着的成本节省。并非所有数据存储都非常适合多区域操作，并且在所有区域都有独立的写入主人。许多应用程序依赖于内存缓存来屏蔽较慢的数据库以防止负载峰值，并减少总体延迟。比方说，我们有一个数据库，通常在缓存服务后以10％每秒请求数（RPS）读取查询，命中率为90％。如果失败区域的用户涌入100k RPS，系统将如何运行，导致缓存未命中并直接进入数据库？如果您考虑部署更多的实例来帮助解决故障，那么这样的问题对于评估非常重要。 如果您的公司尚未达到可以在多个地区进行有效操作的规模，请部署服务以容许您所选区域内发生区域故障。在大多数情况下，这样做并不复杂或昂贵。由于跨区域的低延迟，支持同步复制或基于法定数量操作的存储系统可以。 一旦贵组织在区域冗余方面拥有丰富的经验，区域内的区域冗余变得不那么重要，并且可能不再成为问题。 受到区域故障影响的区域可能无法为同时发生的区域故障的流量提供服务。 撤离退化地区的交通可能会使后续问题更容易回应。 自动缩放 第三件要考虑的是自动缩放。自动缩放或动态协调是云本地计算的基础。如果Kubernetes Pod或AWS实例背后的物理服务器发生故障，则应该更换该Pod或实例，而不进行干预。通过确保每个资源的当前工作负载得到正确扩展，自动调节程序在稳定工作负载下保持可用性非常重要，因为它随着工作负载的变化而扩展或缩减服务。这比经常投入处理高峰流量或潜在高峰所需的资源更具成本效益。 平滑的自动调节需要了解每个服务在负载下的行为方式，启动特征以及它们对下游服务的资源需求。例如，如果您拥有一个能够接受2,000个并发连接的小型MySQL集群，并且调用它的服务使用每个实例30个连接的池，请注意不要让该服务的规模超过66个实例。在复杂的分布式系统中，这种限制可能更难以确定。 一个简单的扩展策略会对单个系统级别度量做出反应，例如实例间的平均CPU利用率。应该如何设置上限和下限？服务性能下降的CPU利用率级别因服务而异，并且可能取决于工作负载。历史指标可以提供帮助（例如，“当上个星期天CPU利用率达到70％，第99百分位延迟时间达到1500毫秒时”），但用户请求以外的因素可能会影响CPU利用率。在Netflix，我们更愿意通过一种称为挤压测试的生产实验来回答这个问题。它的工作原理是逐渐增加路由到单个实例的请求的比例，因为它受到严密监控。 它有助于定期在一天中的不同时间运行这些测试。也许定期填充数据存储的批处理作业会减少某些面向用户的微服务在此期间的最大吞吐量？全球分布式应用程序也应该在不同地区独立进行测试。用户行为可能因国家不同而有所不同。 我们所有用于CPU利用率的指标都具有误导性，并且每年都在变得更糟。Brendan Gregg，“CPU利用率不对”1 基于CPU利用率的缩放可能并不总是按预期运行。特定于应用程序的度量标准可以导致更好的性能和更一致的扩展策略，例如积压队列中的请求数量，持续时间请求花费排队或总体请求延迟。但是，无论调整策略的效果如何，如果部分应用由于冗长的预热时间或其他复杂情况而启动缓慢，自动调节对突发性负载峰值（如突发新闻）几乎没有任何帮助。如果一个生产服务需要15分钟才能启动，那么在突然发生交通高峰的情况下，反应式自动调节功能几乎没有什么帮助。在Netflix，我们构建了我们自己的预测性自动调节器，它使用最近的流量模式和季节性来预测关键时间，但是放慢规模的服务需要额外的容量。 不可变的基础架构和数据持久性 第四件要考虑的是不可变的基础架构和数据持久性。公共云首次使得不可变服务器模式可以被广泛使用，而Netflix则很快接受了这种模式。 与其协调服务器以安装最新的应用程序部署或OS更新，新的机器映像是从基本映像（包含最新的操作系统修补程序和基础元素）构建而成的，其中添加了要部署的应用程序的版本。 部署新代码？ 建立一个新的形象。 我们强烈建议用于云部署的微服务的不可变服务器模式，并且在集装箱平台上运行时会自然而然。 由于Docker容器可以被视为新的包格式来代替RPM或dpkg，因此默认情况下它们通常是不可变的。 那么问题就变成了：何时应该避免这种模式？ 不变性对于数据库等持久性服务来说可能是一个挑战。 系统是否支持多个写主站或零停机主站故障切换？ 什么是数据集大小以及它可以多快地复制到新实例？ 网络块存储使得可以连接到新实例的在线快照可能缩短复制时间，但本地NVMe存储可能对延迟敏感的数据存储更有意义。 一些持久性服务的确提供了一个直接的途径来实现不可替代的实例，但利用这一点对于非常大的数据集可能会成本过高。 服务发现 第五件要考虑的是服务发现。 服务发现是云微服务通常在不断变化的拓扑中找到彼此的方式。 这个问题有很多方法，其特点和复杂性各不相同。 当Netflix第一次进入AWS时，缺乏对这个问题的解决方案，这导致了Eureka服务注册表的开发，该注册表于2012年开放。尤里卡仍然是Netflix环境的核心，与我们选择的微服务RPC和负载紧密集成平衡解决方案。 尽管第三方Eureka客户端存在多种语言，但Eureka本身是用Java编写的，并且与JVM上运行的服务最佳集成。Netflix是一个多语言环境，非JVM服务通常与一个与Eureka交谈的Java边车运行，并将请求负载平衡到其他服务。 最简单的服务发现解决方案就是使用已有的东西。 Kubernetes通过其服务和端点的概念提供了它所管理的服务所需的一切。 亚马逊的应用负载均衡器（ALB）比原来的Elastic Load Balancer产品更适合用于中间层负载均衡。 如果您的部署系统管理ALB注册（Spinnaker可以执行此操作）并且使用Route53为ALB地址提供一致的名称，则您可能不需要额外的服务发现机制，但无论如何您可能都需要。 Netflix的Eureka与其他Netflix运行时平台（也主要针对JVM）协同工作，集成了服务发现，RPC传输和负载平衡，断路，回退，速率限制和减载，为金丝雀动态定制的请求路由和 挤压测试，指标收集和事件发布以及故障注入。 我们发现所有这些对于构建和运行健壮的关键业务云服务都至关重要。 许多较新的开源服务网格项目（如Linkerd和Envoy）都由CNCF托管，为开发人员提供了与Netflix运行时平台类似的功能。服务网格将服务发现与刚刚提到的高级RPC功能相结合，同时作为语言和环境不可知论者。 Copyright © qikqiak.com 2018 all right reserved，powered by GitbookUpdated: 2018-06-11 17:23:32 "}}